@startuml demo

set namespaceSeparator ::

namespace ui {

    class SceneMenu {
        - FlowPane root
        + SceneMenu(FlowPane root, double width, double height)
        - void initialize()
        - void initializeList()
        - void addButton(String name)
    }

    class SceneVisualizer {
        extends Scene
        --
        - BorderPane root
        - Monitor monitor
        - CodeTracker codeTracker
        - Controller controller
        - FlowPane menu
        ..
        - VisualDataStructure visualDS
        --
        + SceneVisualizer(BorderPane root, double width, double height, VisualizedDataStructure visualDS)
        - void initialize()
        - void initializeCSS()
        - void initializeMonitor()
        - void initializeCodeTracker()
        - void initializeController()
        - void initializeMenu()
    }
    
    class Monitor #wheat {
        extends Pane
        --
        - final Group canvas
        ..
        - HashMap<String, Visual> mapVisual
        - HashMap<String, String> mapIndexFieldConnection
        --
        + Monitor()
        ..
        + final Visual getVisual(String name)
        + final Visual getVisualByIndexFieldName(String name)
        ..
        + void createVisualArray(String name, int n)
        + void addIndexFieldConnection(String name, String nameArray)
        + void createVisualList(String name)
        + void createVisualBST(String name)
    }

    class CodeTracker #wheat {
        extends ScrollPane
        --
        + {static} static final String NEXT_LINE
        + {static} static final String REMAIN
        ..
        - Group contentRoot
        - TextFlow codeBoard
        - Polygon currentLineSymbol
        ..
        - HashMap<String, Integer> mapEntrance
        - String currentMethod
        - int currentLineIndex
        --
        + CodeTracker()
        ..
        + void readFile(final String name)
        ..
        + void setCurrentMethod(String nMethod)
        + final String getCurrentMethod()
        + void gotoEntrance(String name)
        + void setCurrentLineIndex(int nLineIndex)
        + int getCurrentLineIndex()
        - final Text getLine(int index)
        - final Text getCurrentLine()
    }

    class Controller #wheat {
        extends Group
        --
        - HBox root
        - PanelConsole panelMethodTrigger
        - PanelConsole panelAnimationController
        - PanelConsole panelOutputBox
        - PanelConsole panelFileReader
        - TextFlow outputBox
        ..
        - VisualizedDataStructure visualDS
        --
        + Controller(VisualDataStructure visualDS)
        - void initializeMethodTriggers()
        - void initializeAnimationControllers()
        - void initializeOutputBox()
        - void initializeBatchProcessor()
    }
    class MethodTrigger {
        extends HBox
        --
        - {static} static final double HEIGHT
        ..
        - String name
        - Button button
        ..
        - ArrayList<TextField> textFields
        --
        + MethodTrigger(String nameMethod, String... nameParameters)
        + MethodTrigger(Method method)
        - void initialize(String nameMethod, String... nameParameters)
        ..
        + final String getName()
        + final Button getButton()
        + final ArrayList<TextField> getTextFields()
        + ArrayList<Integer> getParameters()
    }

    SceneVisualizer *- Controller
    SceneVisualizer *-- Monitor
    SceneVisualizer *-- CodeTracker
    Controller *- MethodTrigger

}

namespace visualized {

    abstract class VisualizedDataStructure #wheat {
        - String name
        - Mode mode
        ..
        - ui::Monitor monitor
        - ui::CodeTracker codeTracker
        - TextFlow outputBox
        --
        + VisualizedDataStructure()
        + VisualizedDataStructure(String name)
        ..
        + void trackCodeMethodBeginning(String name)
        + void trackCodeEntrance(String name)
        + void trackCodeEntrance(String name, boolean isStepPoint)
        + final String getCodeCurrentMethod()
        ..
        + void outputMessage(String message)
        ..
        + {abstract} abstract void createVisual()
        + void createVisualArray(String name, int n, Pair<String, Integer>... indexFields)
        + void createVisualIndexField(String nameArray, Pair<String, Integer> indexField)
        + void createVisualList(String name)
        + void createVisualBST(String name)
        + final VisualArray getVisualArray(String name)
        + final VisualList getVisualList(String name)
        + final VisualBinarySearchTree getVisualBST(String name)
        ..
        + void setName(String name)
        + final String getName()
        ..
        + void setMode(Mode mode)
        + final Mode getMode()
        + final Class<? extends Mode> getModeClass()
        ..
        + void setMonitor(Monitor monitor)
        + void setCodeTracker(CodeTracker codeTracker)
        + void setOutputBox(TextFlow outputBox)
    }

    VisualizedDataStructure --|> VisualizedStack
    VisualizedDataStructure --|> VisualizedQueue
    VisualizedDataStructure --|> VisualizedList
    VisualizedDataStructure --|> VisualizedBinarySearchTree
}

namespace visual {

    abstract class Visual {
        extends Group
        --
        - String name
        --
        + Visual()
        + Visual(String name)
        ..
        + void setName(String name)
        + final String getName()
    }

    abstract class VisualNode {
        - {static} static int nextId
        - {static} static final double BOX_SIZE
        ..
        - boolean isFilled
        - int value
        ..
        - Text text;
        --
        + VisualNode()
        + VisualNode(int value)
        - void resetId()
        ~ void initializeText()
        ..
        + void clear()
        + boolean isFilled()
        + void setValue(int value)
        + int getValue()
        ..
        + void setText(String str)
        + final Text getText()
    }

    class VisualArray {
        - ArrayList<VisualArrayNode> arrayNode
        - HashMap<String, VisualArrayIndex> mapIndexField
        --
        + VisualArray(String name, int n)
        ..
        + void addIndexField(String name, int value)
        + void updateIndexField(String name, int value)
        + void updateElement(int index, int value)
        + void eraseElement(int index)
    }

    Visual --|> VisualNode
    Visual --|> VisualArray
    Visual --|> VisualList
    Visual --|> VisualBinaryTree

    VisualNode --|> VisualArrayNode
    VisualNode --|> VisualListNode
    VisualNode --|> VisualTreeNode

    VisualArray *-- VisualArrayNode
    VisualList *-- VisualListNode
    VisualBinaryTree *-- VisualTreeNode
}

namespace custom {
}

class Main {
    + void start(Stage primaryStage)
    + {static} static void main(String[] args)
}

class Director {
    - {static} static Director instance
    ..
    - Stage primaryStage
    ..
    - {static} static final double UNIT_ANIMATION_RATE
    - {static} static final double MIN_ANIMATION_RATE
    - {static} static final double MAX_ANIMATION_RATE
    - {static} static final double DEFAULT_ANIMATION_RATE
    ..
    - ArrayList<Timeline> animationWaitingList
    - ArrayList<Timeline> animationPlayingList
    - BooleanProperty animationPlayingProperty
    - double animationRate
    - HashSet<Integer> stepPointSet
    - boolean isSingleStep
    --
    - Director()
    + {static} static Director getInstance()
    + void initialize(Stage primaryStage)
    ..
    + void setPrimaryStage(Stage primaryStage)
    + final Stage getPrimaryStage()
    ..
    + final String getRootPath()
    ..
    + <T> void createAnimation(double deltaTime, WritableValue<T> property, T value)
    + <T> void updateAnimation(double deltaTime, WritableValue<T> property, T value)
    + void createAnimationText(Text text, String str)
    ..
    + void addTimeline(Timeline timeline)
    + void addEmptyTimeline()
    + final Timeline getLastTimeline()
    + void playAnimation()
    + void pauseAnimation()
    + void forceClearAllAnimation()
    + final BooleanProperty animationPlayingProperty()
    + boolean isAnimationPlaying()
    + void addStepPoint()
    + void setSingleStep(boolean flag)
    + boolean isSingleStep()
    + void setAnimationRate(double rate)
    + double getAnimationRate()
}

Main o-- ui::SceneMenu
Main o-- ui::SceneVisualizer

ui::SceneVisualizer *-- visualized::VisualizedDataStructure
ui::Controller -down-> visualized::VisualizedDataStructure
visualized::VisualizedDataStructure -up-> ui::Monitor
visualized::VisualizedDataStructure -up-> ui::CodeTracker

ui::Monitor *--- visual::Visual

visualized::VisualizedDataStructure -left[hidden]-> visual::VisualArray

visualized::VisualizedDataStructure -right-|> custom::VisualizedXXX

@enduml